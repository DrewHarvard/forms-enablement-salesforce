/**
 * Encapsulates a URL for Barclays SmartPay, our credit card payment provider, to
 * which we forward the user.
 * 
 * To configure SmartPay, use the backend at https://ca-test.barclaycardsmartpay.com. You'll need a
 * username and password from Carl Allen.
 * 
 * Author: eliot.stock@methods.co.uk
 */
public class SmartPayUrl {
    
    private static final String ENV_TEST = 'TEST';
    
    private static final String ENV_LIVE = 'LIVE';
    
    private static final String URL_TEST = 'https://test.barclaycardsmartpay.com/hpp/pay.shtml';
    
    private static final String URL_LIVE = 'https://live.barclaycardsmartpay.com/hpp/pay.shtml';
    
    // If ever there are problems with the signature, use this URL instead. It gives
    // errors on each field passed in.
    private static final String URL_HMAC_CHECK = 'https://ca-test.barclaycardsmartpay.com/ca/ca/skin/checkhmac.shtml';
    
    // The three-letter capitalised ISO currency code to pay in. For the full list of
    // currency codes supported by Barclaycard SmartPay, please refer to the appendix.
	private static final String CURRENCY_CODE = 'GBP';
    
    // By default, the payment methods offered to the shopper are filtered based on the
    // country which the IP address of the shopper is mapped to. This prevents a UK shopper
    // from being presented with a German payment method like ELV. This IP-to-country
    // mapping is not 100% accurate, so if you have already established the country of the
    // shopper you may set it explicitly using the countryCode parameter.
    private static final  String COUNTRY_CODE = 'GB';
    
    // A comma-separated list of allowed payment methods. This acts as a filter on the
    // payment methods which would normally be available in the Skin. Only the ones in this
    // list will be shown (if available); all others will be ignored. No spaces are allowed.
    // The shorthand ‘card’ may be used to denote all cards (i.e. visa, mc, amex, etc.).
    private static final  String ALLOWED_METHODS = 'card';
    
    private static final String SHOPPER_LOCALE = 'en_GB';
    
    // If you only intend to accept one payment method (e.g Visa), this allows you to
    // automatically load the page that collects the customers payment information. If you
    // supply this value you must ensure that your skin has only one payment method enabled.
	// The value you must supply for this parameter is “true”.
    public static final String SKIP_SELECTION = 'true';

    // This reference will be used in all communication to you about the status of the
    // payment. Although it is a good idea to make sure it is unique, this is not a
    // requirement.
    public String merchantReference;
    
    // The payment amount is specified in minor units (without decimal separator). Thus
    // 100.00 (GBP) is specified as 10000 and 199.95 EUR is specified as 19995. Most
    // currencies are like this and have 100 minor units to a major unit (e.g. pennies
    // to the Pound, cents to the Euro). However the Japanese YEN is an exception and
    // doesn't have any minor units; thus 1001 YEN is specified as 1001.
    public String paymentAmount;
    
    // The Skin to be used. You can have more than one Skin associated with the account
    // if you require a different branding.
    public String skinCode;
    
    // The merchant account you want to process this payment with (This will be provided
    // to you in your SmartPay set up documentation).
    public String merchantAccount;
    
    // The signature in Base64 encoded format. The signature is generated by encrypting
    // the values of a number of the payment session fields and computing the HMAC over
    // this using the shared secret (configured in the Skin).
    public String merchantSig;
    
    // An id that refers uniquely to the shopper (e.g. a customer id in a shopping cart
    // system). This is an optional field, but useful as we can do velocity fraud
    // checking on it.
    public String shopperReference;
    
    // (Maximum length 128 characters) – This field will be passed back on the return URL
    // when the shopper completes the payment and returns to your shop. This can be used
    // to pass through a session id if needed.
    public String merchantReturnData;
    
    // To override the Skin's result URL, specify the URL in the parameter resURL in the
    // payment session. The resURL parameter does not need to be included in the signature.
    public String resURL;

    public String customerEmail;
    
    // Required, since Apex code can't throw the standard Exception class.
    public class SmartPayUrlException extends Exception {
        
    }
    
    public override String toString() {
        // Get this each and every time in case it's changed under us.
        SmartPay_Settings__c settings = getSettings();
        
        Datetime now = Datetime.now();
        Datetime oneDayFromNow = now.addHours(24);
        Datetime oneMonthFromNow = now.addMonths(1);
        
        String url = '';
        
        if (ENV_LIVE.equals(settings.Environment__c)) {
            url += URL_LIVE;
        }
        else if (ENV_TEST.equals(settings.Environment__c)) {
            url += URL_TEST;
        }
        else {
            throw new SmartPayUrlException('Environment on custom settings record must be LIVE or TEST.');
        }
        
        // To debug any issues with the HMAC signature, go here instead:
        // url = URL_HMAC_CHECK;
        
        url += '?';
        url += 'merchantReference=' + merchantReference;
        
        url += '&';
        url += 'paymentAmount=' + paymentAmount;
        
        url += '&';
        url += 'currencyCode=' + CURRENCY_CODE;
        
        url += '&';
        url += 'countryCode=' + COUNTRY_CODE;
        
        url += '&';
        url += 'shopperLocale=' + SHOPPER_LOCALE;
        
        url += '&';
        url += 'allowedMethods=' + ALLOWED_METHODS;
        
        url += '&';
        url += 'skipSelection=' + SKIP_SELECTION;
        
        // The date by which the goods or services specified in the order must be shipped
	    // or rendered. YYYY-MM-DD format. This can always be a day or so from now.
	    String shipBeforeDate = oneDayFromNow.format('yyyy-MM-dd');
        url += '&';
        url += 'shipBeforeDate=' + shipBeforeDate;
        
		// Skins are collections of configuration in the SmartPay backend.
        skinCode = settings.Skin_Code__c;
        url += '&';
        url += 'skinCode=' + skinCode;
        
        // Companies House has multiple merchant accounts with SmartPay, all under the one
        // company account.
        merchantAccount = settings.Merchant_account__c;
        url += '&';
        url += 'merchantAccount=' + merchantAccount;

        url += '&';
        url += 'merchantReturnData=' + merchantReference;

        url += '&';
        url += 'shopperEmail=' + customerEmail;
        
        // The final time by which a payment needs to have been made. This is especially
        // useful for tickets/reservations, where you want to “lock” the item for sale for
        // only a short time and payments made after this time would lead to extra costs
        // and administrative hassle. YYYY-MM-DDThh:mm:ssTZD format.
        String sessionValidity = oneMonthFromNow.format('yyyy-MM-dd\'T\'hh:mm:ss\'Z\'');
        url += '&';
        url += 'sessionValidity=' + sessionValidity;

        // It would be nice to specify the result URL dynamically, so that it's driven by us
        // and not by the skin config in the SmartPay backend, but this doesn't work. SmartPay
        // never sends us here.
        url += '&';     
        url += 'resURL=' + getResultUrl().replace('%', AppConstants.PERCENTAGE_REPLACEMENT);
        
        // We use this to sign the query string parameter values we're sending over.
        String hmacKey = settings.HMAC_key__c;
        
		// When setting up a payment the signing string is as follows:
		//   paymentAmount + currencyCode + shipBeforeDate + merchantReference + skinCode
		//   + merchantAccount + sessionValidity + shopperEmail + shopperReference
		//   + allowedMethods + blockedMethods + shopperStatement + billingAddressType
		// The order of the fields must be exactly the same as described above. If you are not using
		// one of the fields, the value for this field in the signing string is an empty string.
		//String signingString = paymentAmount + CURRENCY_CODE + shipBeforeDate + merchantReference
        //    + skinCode + merchantAccount + sessionValidity + ALLOWED_METHODS;

        //String signingString = 'allowedMethods:countryCode:currencyCode:merchantAccount:merchantReference:paymentAmount:resURL:sessionValidity:shipBeforeDate:shopperLocale:skinCode:skipSelection:';
        //signingString += ALLOWED_METHODS + ':' + COUNTRY_CODE + ':' + CURRENCY_CODE + ':' + merchantAccount + ':' + merchantReference + ':' + paymentAmount + ':' + getResultUrl() + ':'+ sessionValidity.replace('\\', '\\\\').replace(':', '\\:') + ':' + shipBeforeDate.replace('\\', '\\\\').replace(':', '\\:') + ':' + SHOPPER_LOCALE + ':' + skinCode + ':' + SKIP_SELECTION ;

        String signingString = 'allowedMethods:countryCode:currencyCode:merchantAccount:merchantReference:merchantReturnData:paymentAmount:resURL:sessionValidity:shipBeforeDate:shopperEmail:shopperLocale:skinCode:skipSelection:';
        signingString += ALLOWED_METHODS + ':' + COUNTRY_CODE + ':' + CURRENCY_CODE + ':' + merchantAccount + ':' + merchantReference + ':' + merchantReference + ':' + paymentAmount + ':'  + getResultUrl().replace('\\', '\\\\').replace(':', '\\:').replace('%', AppConstants.PERCENTAGE_REPLACEMENT)  +':' + sessionValidity.replace('\\', '\\\\').replace(':', '\\:') + ':' + shipBeforeDate.replace('\\', '\\\\').replace(':', '\\:') + ':' + customerEmail + ':' + SHOPPER_LOCALE + ':' + skinCode + ':' + SKIP_SELECTION;


        // TODO: (BETA) Before switching this over to hmacSHA256, be aware that that changes the whole
        // signing string format. See the HMAC check tool. None of this is documented in the PDF
        // documentation.    
        Blob sig = Crypto.generateMac('HmacSHA256', Blob.valueOf(signingString),EncodingUtil.convertFromHex(hmacKey));
        //Blob sig = crypto.generateMac('hmacSHA1', Blob.valueOf(signingString), Blob.valueOf(hmacKey));
        String sigEncoded = EncodingUtil.base64Encode(sig);
        
        // To debug signature issues, uncomment this. Don't leave it in. Insecure to have the HMAC
        // key in the logs.
        // System.debug(LoggingLevel.INFO, 'Signing ' + signingString + ' with HMAC key ' + hmacKey
        //           + ' yields signature ' + sig + ' which base64 encodes to ' + sigEncoded);

        url += '&';
        url += 'merchantSig=' + sigEncoded;

        return url;
    }
    
    /**
     * Generate the URL to which SmartPay will pass the user back after they've paid. Should be
     * on the same hostname as we are now. No need to URL encode it.
     */
    private String getResultUrl() {
        String hostname = ApexPages.currentPage().getHeaders().get('Host');
        String pageUrl = ApexPages.currentPage().getUrl();

        //Here page URL contains Apex/Payment
        pageUrl = pageUrl.substringAfter('/apex');

        String url = 'https://' + hostname + pageUrl;
        return url;
    }
    
    // Look for a custom setting record with the details for the SmartPay environment.
	public static SmartPay_Settings__c  getSettings() {
		List<SmartPay_Settings__c > settings = SmartPay_Settings__c.getAll().values();
		
        // Return the first active one found.
		for (SmartPay_Settings__c s : settings) {
			if (s.Active__c) {
				return s;
			}
		}
		
		// Unit tests should not rely on custom settings records.
		if (Test.isRunningTest()) {
			SmartPay_Settings__c s = new SmartPay_Settings__c (Environment__c  = 'TEST',
				HMAC_key__c  = 'unitTestHmacKey', Merchant_account__c  = 'unitTestMerchantAccount',
				Active__c = true);
			return s;
		}
		
		System.debug(LoggingLevel.ERROR, 'No active SmartPay Settings records exist under Custom'
                     + ' Settings. Can\'t build a SmartPay URL.');
		return null;
	}
    
    public class Builder {
        
        private SmartPayUrl url;
        
        public Builder() {
            url = new SmartPayUrl();
        }
        
        public Builder merchantReference(String value) {
            url.merchantReference = value;
            return this;
        }
        
        public Builder paymentAmount(Decimal valueInPounds) {
            // We cast this to an Integer number of pence, then store it as a String.
            // Awful but necessary. See:
			//   http://boards.developerforce.com/t5/Apex-Code-Development/Converting-number-fields-to-Integer/td-p/58518
			Integer valueInPence = Integer.valueOf(String.valueOf(Math.roundToLong(valueInPounds))) * 100;
            url.paymentAmount = String.valueOf(valueInPence);
            
            return this;
        }

        public Builder customerEmail(String email)
        {
            url.customerEmail = email;
            return this;
        }
        
        public SmartPayUrl build() {
            return url;
        }
        
    }
    
}