/**
 * Client to the OAuth2 authentication server at accounts.companieshouse.gov.uk. Also
 * generates URLs for redirecting users to in order to authenticate as a user or as a
 * company.
 * 
 * For limits around calling out, see:
 *   https://developer.salesforce.com/docs/atlas.en-us.apexcode.meta/apexcode/apex_callouts_timeouts.htm
 * 
 * Author: eliot.stock@methods.co.uk
 */

public class AccountApiClient {

    private static final String SCOPE_PREFIX = 'http://api.companieshouse.gov.uk/company/';

    private static final Integer NONCE_LENGTH = 16;

    // Required, since Apex code can't throw the standard Exception class.
    public class AccountApiClientException extends Exception {

    }

    public class Token {
        /*
        public String accessToken;
        // TODO: Consider using an Integer here if this comes across without quotes.
        public String expiresIn;
        public String tokenType;
        public String refreshToken;
        */
        // profile class must match up with response on deserialization
        public String access_token;
        // TODO: Consider using an Integer here if this comes across without quotes.
        public String expires_in;
        public String token_type;
        public String refresh_token;
    }

    public class UserProfile {
        public String surname;
        public String forename;
        public String email;
        public String id;
    }

    // LB more data is coming back then what is noted in the above Token class, so set it in the class below to properly deserialize and assign later
    public class GetTokenResult {
        public Token GetTokenResult;
    }

    /**
     * Step 1. Generate a nonce (random alphanumeric string, used once). Pass this in the URL
     * and expect the same value back on the redirect (so, hold on to it somewhere).
     */
    public String getNonce() {
        final String chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789abcdefghijklmnopqrstuvwxyz';

        String nonce = '';

        while (nonce.length() < NONCE_LENGTH) {
            Integer i = Math.mod(Math.abs(Crypto.getRandomInteger()), chars.length());
            nonce += chars.substring(i, i + 1);
        }

        return nonce;
    }

    /**
     * Step 2 for user auth: Request authorisation code.
     * 
     * Send the user to the URL generated by this method.
     */
    public String getUserAuthUrl(String nonce) {
        Account_Api_Settings__c settings = getSettings();
        // LB authorize to authorise
        String authUrl = 'https://' + settings.Host__c + '/oauth2/authorise' + '?';

        // Response type is always "code"
        authUrl += 'response_type=code';

        // Client ID identifies us to the server and is not secret
        authUrl += '&client_id=' + settings.Client_ID__c;

        // Chris Smith's instructions: It is mandatory to pass a state parameter, containing a nonce
        // value. This will be returned to the supplied redirect_ui along with the authorisation
        // code, and must be checked to ensure it is still valid.
        // may be in the wrong sequences....
        authUrl += '&state=' + nonce;

        //authUrl += '&reauthenticate=true';
        // LB Redirect URI.
        // Try URL-encoding it.
        // pass the UTF-8 encoding
        String redirectUrl = EncodingUtil.urlEncode(getRedirectUrl(), 'UTF-8');
        // String redirectUrl = getRedirectUrl();
        // LB url to uri
        authUrl += '&redirect_uri=' + redirectUrl;



        // At a later stage, we may also want to use:
        // prompt=true: Force re-confirmation of scope
        // reauthenticate=true: Force reauthentication
        return authUrl;
    }


    /**
     * Step 3: Once an authorisation code has been returned, it must be exchanged for an access_token.
     */

    public AccountApiClient.Token getAccessToken(String authCode) { // , String authtype

        Account_Api_Settings__c settings = getSettings();

        // noted on VPage(start) System.debug(settings);

        HttpRequest request = new HttpRequest();
        String endpoint = 'https://' + settings.Host__c + '/oauth2/token';
        request.setEndpoint(endpoint);
        request.setMethod('POST');

        String body = '';

        body += 'code=' + authCode + '&';

        body += 'client_id=' + settings.Client_ID__c + '&';
        body += 'client_secret=' + settings.Client_Secret__c + '&';

        // Redirect URL
        // perhaps we test if this is a userauth redirect or company auth redirect
        // make sure to change authtype variable so its testable

        // authtype = 'warning';
        // set manually to always register user
        // change

        String redirectUrl;
        String companyredirectURL;

        /*
        // todo if it doesn't work hard code 
        if (authtype != 'warning') {
            redirectUrl = getRedirectUrl();
        } else {
            redirectUrl = getCompanyRedirectUrl();
        }
        */
        //redirectUrl = getRedirectUrl();

        companyredirectURL = getRedirectUrl();
        // switch back to redirectURL
        body += 'redirect_uri=' + companyredirectURL + '&';

        // Grant type
        // authorization_code to authorisation_code
        body += 'grant_type=authorization_code';

        System.debug(LoggingLevel.INFO, 'Get access token POST to ' + endpoint + ', request body: ' + body);

        request.setBody(body);

        Http http = new Http();

        // Send the request. This will get us a mock response under the unit test.
        HTTPResponse response = http.send(request);

        System.debug('The response for the token is' + response);

        //AccountApiClient.Token testertoken =  AccountApiClient.Token;
        //  System.debug('The token from our client is' + testertoken);

        System.debug(LoggingLevel.INFO, 'Response status code: ' + response.getStatusCode());
        System.debug(LoggingLevel.INFO, 'Response body: ' + response.getBody());
        System.debug(LoggingLevel.INFO, 'access token request response is' + response.getBody());
        System.debug('Authcode sent was' + authCode);

        if (response.getStatusCode() == 302) {
            throw new AccountApiClientException('Redirect response. We don\'t follow redirects. Status: ' + response.getStatus() + ', redirecting to: ' + response.getHeader('Location'));
        }

        if (response.getBody().length() == 0) {
            throw new AccountApiClientException('Empty response body. Status code: ' + response.getStatusCode());
        }

        if (response.getBody().startsWith('<!DOCTYPE html>')) {
            throw new AccountApiClientException('HTML response. Expected JSON. Probably an error page. Check the logs for a span tag with id="error-description".');
        }


        try {
            AccountApiClient.Token token = (AccountApiClient.Token) JSON.deserializeStrict(response.getBody(), AccountApiClient.Token.class); //.GetTokenResult;

            System.Debug('token is' + response.getBody());
            String temptoken = response.getBody();

            // AccountApiClient.Token token =  (AccountApiClient.Token)JSON.deserializeStrict(response.getBody(), AccountApiClient.Token.class);
            //  System.debug('token is' + token);
            //       if(true){throw new AccountApiClientException('Here is the token'+ token);}

            // return temptoken;
            return token;
            // return token;
        } catch (JSONException e) {
            throw new AccountApiClientException('Not a JSON response:' + response.getBody());
            // error here is usually thrown by navigating back and forth and the access token/auth code errors
            // create an error page and redirect to there and then provide a link to original User Auth screen.
            //
        }

    }

    /**
     * Step 4: Once an access token has been received, user details may be requested.
     */
    public AccountApiClient.UserProfile getUserProfile(String accessToken) {
        Account_Api_Settings__c settings = getSettings();

        HttpRequest request = new HttpRequest();
        request.setEndpoint('https://' + settings.Host__c + '/user/profile');
        request.setMethod('GET');
        request.setHeader('Authorization', 'Bearer ' + accessToken);
        System.debug('access token is:' + accessToken);
        Http http = new Http();

        // Send the request. This will get us a mock response under the unit test.
        HTTPResponse response = http.send(request);

        System.debug(LoggingLevel.INFO, 'Response status code: ' + response.getStatusCode());
        System.debug(LoggingLevel.INFO, 'Response body: ' + response.getBody());

        if (response.getStatusCode() >= 400) {
            throw new AccountApiClientException('Error response to user profile request. ' + response.getStatusCode() + ': ' + response.getStatus() + '' + response.getBody());

            // TODO: Chris Smith's instructions:
            // If this returns a 4xx status code, it is likely that the access_token has
            // expired. In which case you should use the refresh_token to obtain a new access
            // token. We can talk about this later, as it can be a bit involved with the user
            // journeys and scenarios, too much for this email.
        }

        // TODO: Consider exception handling. Should clients catch parse exceptions?
        AccountApiClient.UserProfile profile = (AccountApiClient.UserProfile) JSON.deserialize(response.getBody(),
            AccountApiClient.UserProfile.class);

        return profile;
    }

    /**
     * Redirect URL should be on the same hostname as we are now. No need to URL encode it.
     */
    public String getRedirectUrl() {
        String hostname = ApexPages.currentPage().getHeaders().get('Host');
        String redirectUrl = 'https://' + hostname + '/apex/authcallback';

        return redirectUrl;
    }

    /**
     * Step 2 for company auth: Request authorisation code.
     * 
     * Send the user to the URL generated by this method.
     */
    public String getCompanyAuthUrl(String nonce, String companyNumber) { //, String companyNumber

        Account_Api_Settings__c settings = getSettings();
        // LB authorize to authorise
        String authUrl = 'https://' + settings.Host__c + '/oauth2/authorise' + '?';

        // Response type is always "code"
        authUrl += 'response_type=code';

        // Client ID identifies us to the server and is not secret
        authUrl += '&client_id=' + settings.Client_ID__c;

        // Chris Smith's instructions: It is mandatory to pass a state parameter, containing a nonce
        // value. This will be returned to the supplied redirect_ui along with the authorisation
        // code, and must be checked to ensure it is still valid.
        // may be in the wrong sequences....
        authUrl += '&state=' + nonce;

        //authUrl += '&reauthenticate=true';
        // LB Redirect URI.
        // Try URL-encoding it.
        // pass the UTF-8 encoding
        // todo: switch back to getCompanyRedirectUrl once complete

        //String redirectUrl = EncodingUtil.urlEncode(getCompanyRedirectUrl(), 'UTF-8');
        String redirectUrl = EncodingUtil.urlEncode(getRedirectUrl(), 'UTF-8');
        // LB url to uri

        // add company identifer here

        authUrl += '&redirect_uri=' + redirectUrl;



        // At a later stage, we may also want to use:
        // prompt=true: Force re-confirmation of scope
        // reauthenticate=true: Force reauthentication

        // The company auth URL also has a scope and it's got the company number on the end.
        authUrl += '&scope=' + SCOPE_PREFIX + companyNumber; // perhaps hardcode the company number

        return authUrl;
    }

    // note may need a separate 
    // separate redirect method for company to pass parameters to DS0Page0 controller 
    // paramaters passed should be '?CompanyNumber='
    // company number is hardcoded for show and tell. make dynamic
    public String getCompanyRedirectUrl() {
        String hostname = ApexPages.currentPage().getHeaders().get('Host');
        String redirectUrl = 'https://' + hostname + '/apex/Start';

        return redirectUrl;
    }

    // Look for a custom setting record with the credentials for the server.
    private static Account_Api_Settings__c getSettings() {
        List < Account_Api_Settings__c > settings = Account_Api_Settings__c.getAll().values();

        // Return the first active one found.
        for (Account_Api_Settings__c s: settings) {
            if (s.Active__c) {
                return s;
            }
        }

        // Unit tests should not rely on custom settings records.
        if (Test.isRunningTest()) {
            Account_Api_Settings__c s = new Account_Api_Settings__c(
                Host__c = 'account.preprod.companieshouse.gov.uk',
                Client_ID__c = 'unit_test_client_id',
                Client_Secret__c = 'unit_test_client_secret',
                Active__c = true);
            return s;
        }

        System.debug(LoggingLevel.ERROR, 'No active SmartPay Settings records exist under Custom' + ' Settings. Can\'t build a SmartPay URL.');
        return null;
    }

}